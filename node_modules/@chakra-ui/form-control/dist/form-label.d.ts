import * as _chakra_ui_system from '@chakra-ui/system';
import { HTMLChakraProps, ThemingProps } from '@chakra-ui/system';

interface FormLabelProps extends HTMLChakraProps<"label">, ThemingProps<"FormLabel"> {
    /**
     * @type React.ReactNode
     */
    requiredIndicator?: React.ReactNode;
    /**
     * @type React.ReactNode
     */
    optionalIndicator?: React.ReactNode;
}
/**
 * Used to enhance the usability of form controls.
 *
 * It is used to inform users as to what information
 * is requested for a form field.
 *
 * ♿️ Accessibility: Every form field should have a form label.
 */
declare constimport React, { useState, createContext, useContext } from "react";
import {
  ChakraProvider,
  Box,
  Flex,
  Heading,
  Text,
  FormControl,
  FormLabel,
  Input,
  Button,
  Stack,
} from "@chakra-ui/react";

// Transaction type
type Transaction = {
  reason: string;
  amount: number;
  type: "income" | "expense";
};

// ExpenseTrackerContext type
type ExpenseTrackerContextType = {
  transactions: Transaction[];
  addExpense: (expense: Transaction) => void;
  getTotalIncome: () => number;
  getTotalExpense: () => number;
};

// Create ExpenseTrackerContext
const ExpenseTrackerContext = createContext<ExpenseTrackerContextType | null>(
  null
);

// ExpenseTrackerProvider component
function ExpenseTrackerProvider({ children }: { children: React.ReactNode }) {
  const [transactions, setTransactions] = useState<Transaction[]>([]);

  const addExpense = (expense: Transaction) => {
    setTransactions([...transactions, expense]);
  };

  const getTotalIncome = (): number =>
    transactions
      .filter((transaction) => transaction.type === "income")
      .reduce((total, transaction) => total + transaction.amount, 0);

  const getTotalExpense = (): number =>
    transactions
      .filter((transaction) => transaction.type === "expense")
      .reduce((total, transaction) => total + transaction.amount, 0);

  const value: ExpenseTrackerContextType = {
    transactions,
    addExpense,
    getTotalIncome,
    getTotalExpense,
  };

  return (
    <ExpenseTrackerContext.Provider value={value}>
      {children}
    </ExpenseTrackerContext.Provider>
  );
}

// ExpenseForm component

// ExpenseTrackerApp component
function ExpenseTrackerApp() {
  const { transactions, getTotalIncome, getTotalExpense } =
    useContext(ExpenseTrackerContext)!;

  return (
    <Box p={4}>
      <Heading mb={4}>Expense Tracker</Heading>

      <Flex justifyContent="space-between" mb={4}>
        <Box>
          <Text fontWeight="bold">Income:</Text>
          <Text>${getTotalIncome()}</Text>
        </Box>
        <Box>
          <Text fontWeight="bold">Expense:</Text>
          <Text>${getTotalExpense()}</Text>
        </Box>
      </Flex>

      <ExpenseForm />

      <Box mt={4}>
        <Text fontWeight="bold">Transactions:</Text>
        {transactions.map((transaction, index) => (
          <Flex key={index} justifyContent="space-between" mt={2}>
            <Text>{transaction.reason}</Text>
            <Text>${transaction.amount}</Text>
          </Flex>
        ))}
      </Box>
    </Box>
  );
}

// App component
function App() {
  return (
    <ChakraProvider>
      <ExpenseTrackerProvider>
        <ExpenseTrackerApp />
      </ExpenseTrackerProvider>
    </ChakraProvider>
  );
}

export default App;FormLabel: _chakra_ui_system.ComponentWithAs<"label", FormLabelProps>;
interface RequiredIndicatorProps extends HTMLChakraProps<"span"> {
}
/**
 * Used to show a "required" text or an asterisks (*) to indicate that
 * a field is required.
 */
declare const RequiredIndicator: _chakra_ui_system.ComponentWithAs<"span", RequiredIndicatorProps>;

export { FormLabel, FormLabelProps, RequiredIndicator, RequiredIndicatorProps };
